/*
 * MobileNode.cc
 *
 *  Created on: May 30, 2014
 *      Author: sandro
 */

#include <omnetpp.h>
#include <string.h>
#include <stdio.h>

#define HN 0 // home network
#define FN 1 // foreign network
#define NN 2 // no network

class MobileNode : public cSimpleModule
{
private:
    simtime_t CtrlTimeout; // timeout per i messaggi di controllo
    cMessage *CtrlTimeoutEvent; // pointer al self message di controllo
    simtime_t MsTimeout; // timeout per mobile solicitation
    cMessage *MsTimeoutEvent; // holds pointer to the MS timeout self-message
    std::string mnaddress; // mobile node actual ipv6 address
    std::string haaddress; // home address
    std::string homeAgent; // home agent address
    simtime_t halifetime; // lifetime del home address
    int state; // state HN, FN, NN

public:
    MobileNode();
    ~MobileNode();
    void sendSolicitation();
    void homeLinkDetection();

protected:
    virtual void initialize();
    virtual void handleMessage(cMessage *msg);
};

Define_Module(MobileNode);

MobileNode::MobileNode()
{
    CtrlTimeoutEvent = NULL;
    MsTimeoutEvent = NULL;
}

MobileNode::~MobileNode()
{
    cancelAndDelete(CtrlTimeoutEvent);
    cancelAndDelete(MsTimeoutEvent);
}

void MobileNode::initialize()
{
    // messaggio di controllo arriva ogni secondo
    CtrlTimeout = 1.0;
    CtrlTimeoutEvent = new cMessage("Self message di controllo!");

    // primi valori
    mnaddress = "3.2.1.4";
    haaddress = "1.1.1.4";
    homeAgent = "1.1.1.1";
    //bootstraping
    homeLinkDetection();

    // manda il messaggio di controllo fra CtrlTimeout
    scheduleAt(simTime()+CtrlTimeout, CtrlTimeoutEvent);

}

void MobileNode::handleMessage(cMessage *msg)
{
    if (msg==CtrlTimeoutEvent)
    {
        EV << "Arrivato il messaggio di controllo!";
    }
    else if (msg==MsTimeoutEvent)
    {

    }
    else
    {
        EV << "Solicitation accepted!";
    }
}

void MobileNode::homeLinkDetection()
{
    if (mnaddress.compare(haaddress) == 0)
    {
        state = HN;
        EV << "State: home network!";
    }
    else
    {
        sendSolicitation();
    }
}

void MobileNode::sendSolicitation()
{
    cMessage *ms = new cMessage("mobile solicitation");
    MsTimeout = 5.0;
    MsTimeoutEvent = new cMessage("Self message mobile solicitation");

    EV << "Sending mobile solicitation!";
    send(ms,"out");
    scheduleAt(simTime()+MsTimeout, MsTimeoutEvent);
}
