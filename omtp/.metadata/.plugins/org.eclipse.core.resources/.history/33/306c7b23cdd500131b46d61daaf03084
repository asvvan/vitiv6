//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
// 
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see http://www.gnu.org/licenses/.
// 

#include <src/MobileNode.h>

#define HN 0 // home network
#define FN 1 // foreign network
#define NN 2 // no network

#define DATA 0
#define SOLICITATION 1
#define ERROR_ICMP 2
#define ERROR_BINDING 3

Define_Module(MobileNode);

MobileNode::MobileNode() {
    // TODO Auto-generated constructor stub
    mnaddress = "1.1.1.1";
    haaddress = "1.1.1.4";
    halifetime = 0;
}

MobileNode::~MobileNode() {
    // TODO Auto-generated destructor stub
}

void MobileNode::initialize() {
    state = par("state");
    mobileSolicitation();
}

void MobileNode::updateState() {
    if ( mnaddress.compare(0,5,haaddress) == 0 ) state = HN;
    else if ( !mnaddress.empty() ) state = FN;
    else state = NN;
}

BindingUpdate MobileNode::creteNewBU(std::string mn, std::string ha)
{
    BindingUpdate *bu = new BindingUpdate();
    bu->setIpCoa(mnaddress);
    bu->setIpHomeaddress(haaddress);
    return *bu;
}

bool MobileNode::mobileSolicitation()
{
    hamn_msg *msg = new hamn_msg();
    msg->source_var = mnaddress;
    msg->destination_var = haaddress;
    msg->msg_var = "Puppa!";
    msg->type_var = SOLICITATION;
    msg->lifetime_var = halifetime;

    send(msg, "out0");
    return true;
}

void MobileNode::handleMessage(cMessage *msg)
{
    hamn_msg *hhmsg = check_and_cast<hamn_msg *>(msg);

    switch(hhmsg->type_var) {
    case DATA:
        handleData(hhmsg);
    break;
    case SOLICITATION:
        handleSolicitation(hhmsg);
    break;
    case ERROR_ICMP:
    case ERROR_BINDING:
        handleError(hhmsg);
    break;
    }
}

void MobileNode::handleSolicitation(hamn_msg *msg)
{
    //The source address of the IP packet carrying the Mobile Prefix Advertisement is the
    //same as the home agent address to which the mobile node last sent an accepted home registration
    //Binding Update to register its primary care-of address
    const char* tocmp = msg->source_var.c_str();
    if(haaddress.compare(tocmp))
    {
        //The packet must have a type 2 route header and should be protected by an IPSec header
        //as described in Section 5.4 and 6.8

        //Control the ICMP identifier value of the most recently sent Mobile Prefix Solicitation
        //and that no other Advertisment has been received
        //Send Mobile Solicitation ??

        halifetime = msg->lifetime_var;
    }
    else
    {
        //Silent discard
    }

}

void MobileNode::handleData(hamn_msg* msg)
{
    std::cout << msg->msg_var << std::endl;
}

void MobileNode::handleError(hamn_msg* msg)
{
    switch(msg->type_var)
    {
    case ERROR_ICMP: {
        const char* icmperr = msg->msg_var.c_str();
        std::string str = "Code 1";
        if(str.compare(icmperr))
        {
            for(int i = 0; i < BU_list.size(); i++)
            {
                BindingUpdate* bu = &BU_list[i];
                const char* msgsource = msg->source_var.c_str();
                if(mnaddress .compare(bu->getIpCoa()) && bu->getIpCn().compare(msgsource))
                {
                    BU_list.erase(BU_list.begin() + i);
                    break;
                }
            }
        }
        str = "Code 2";
        if(str.compare(icmperr))
        {
            //Log the error and discard the message
        }
        break;
    }
    case ERROR_BINDING:
        BindingUpdate* bu;
        BindingUpdate* buFound;
        const char* msgsource = msg->source_var.c_str();
        for(int i = 0; i < BU_list.size(); i++)
        {
            bu = BU_list[i];
            if(bu->getIpCn().compare(msgsource))
            {
                buFound = bu;
                break;
            }
        }
        if(buFound)
        {
            if(msg->msg_var.compare("Status 1"))
            {
                if(msg->source_var.compare(haaddress))
                {
                    //Send a BU to home agent
                }
                //else if the mobile node has recent upper layer progress information
                //i.e communication with CN in progress it MAY ignore the message

                //else if there is no upper layer progress information it MUST remove
                //the entry and route further communication through the HA
            }
            else if(msg->msg_var.compare("Status 2"))
            {
                //if mobile is not expecting an acknoledgement or a response from CN
                //it SHOULD ignore this message

                //else the MN should cease the use of any extensions to this specification
                //if no extension had been used MN SHOULD cease the attempt to use Route Optimization
            }
        }
        break;
    default:
        break;
    }
}

}
