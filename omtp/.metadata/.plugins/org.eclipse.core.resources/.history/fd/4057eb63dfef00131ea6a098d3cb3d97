//
// Generated file, do not edit! Created by opp_msgc 4.4 from hamn.msg.
//

#ifndef _HAMN_M_H_
#define _HAMN_M_H_

#include <omnetpp.h>

// opp_msgc version check
#define MSGC_VERSION 0x0404
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgc: 'make clean' should help.
#endif



/**
 * Class generated from <tt>hamn.msg</tt> by opp_msgc.
 * <pre>
 * packet Hamn {
 *     
 *     string msg;
 *     int lifetime;
 *     string source;
 *     string destination;
 *     
 *     
 * }
 * </pre>
 */
class Hamn : public ::cPacket
{
  protected:
    opp_string msg_var;
    int lifetime_var;
    opp_string source_var;
    opp_string destination_var;

  private:
    void copy(const Hamn& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const Hamn&);

  public:
    Hamn(const char *name=NULL, int kind=0);
    Hamn(const Hamn& other);
    virtual ~Hamn();
    Hamn& operator=(const Hamn& other);
    virtual Hamn *dup() const {return new Hamn(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual const char * getMsg() const;
    virtual void setMsg(const char * msg);
    virtual int getLifetime() const;
    virtual void setLifetime(int lifetime);
    virtual const char * getSource() const;
    virtual void setSource(const char * source);
    virtual const char * getDestination() const;
    virtual void setDestination(const char * destination);

    const opp_string& getDestinationVar() const {
        return destination_var;
    }

    void setDestinationVar(const opp_string& destinationVar) {
        destination_var = destinationVar;
    }

    int getLifetimeVar() const {
        return lifetime_var;
    }

    void setLifetimeVar(int lifetimeVar) {
        lifetime_var = lifetimeVar;
    }

    const opp_string& getMsgVar() const {
        return msg_var;
    }

    void setMsgVar(const opp_string& msgVar) {
        msg_var = msgVar;
    }

    const opp_string& getSourceVar() const {
        return source_var;
    }

    void setSourceVar(const opp_string& sourceVar) {
        source_var = sourceVar;
    }
};

inline void doPacking(cCommBuffer *b, Hamn& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, Hamn& obj) {obj.parsimUnpack(b);}


#endif // _HAMN_M_H_
